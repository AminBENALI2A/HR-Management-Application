name: Deploy Fullstack HR Management Optymum App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      FRONTEND_BUCKET: hr-management-optymum
      CLOUDFRONT_DISTRIBUTION_ID: E3ODSL8DJRDNJT
      EB_APP_NAME: HR-Management-Backend
      EB_ENV_NAME: HR-Management-Backend-env
      EB_BUCKET: elasticbeanstalk-us-east-1-654654387741
      KEEP_VERSIONS: 3
      SOLUTION_STACK: "64bit Amazon Linux 2023 v6.6.3 running Node.js 20"  # Version corrigée

    steps:
      # 1️⃣ Checkout code
      - uses: actions/checkout@v4

      # 2️⃣ Setup Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: '20.19.4'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            backend/package-lock.json

      # 3️⃣ Install AWS CLI
      - name: Setup AWS CLI
        run: |
          if command -v aws &> /dev/null; then
            echo "AWS CLI already installed, updating..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
          else
            echo "Installing AWS CLI..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      # 4️⃣ Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      ###########################
      # Build & deploy frontend #
      ###########################
      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: |
          npm install -g npm@10.8.2
          npm ci
      - name: Set Frontend Env
        run: |
          echo "REACT_APP_API_URL=https://HR-Managment-Backend-env.eba-qamtuckt.us-east-1.elasticbeanstalk.com" >> $GITHUB_ENV

      - name: Build Frontend
        working-directory: ./frontend
        run: npm run build

      - name: Deploy Frontend to S3
        working-directory: ./frontend
        run: |
          aws s3 sync build s3://${{ env.FRONTEND_BUCKET }} --delete

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

      ##########################
      # Build & deploy backend #
      ##########################
      - name: Install Backend Dependencies
        working-directory: ./backend
        run: |
          npm install -g npm@10.8.2
          npm install -g @nestjs/cli
          npm ci --omit=dev
          npm install --save-dev @types/cookie-parser @types/express @types/bcrypt @types/nodemailer

      - name: Build Backend
        working-directory: ./backend
        run: |
          sed -i "s/parseInt(process.env.DB_PORT, 10)/parseInt(process.env.DB_PORT || '5432', 10)/" src/app.module.ts
          npx nest build

      - name: Zip Backend for EB
        working-directory: ./backend
        run: |
          zip -r backend-deploy.zip * -x "node_modules/*" ".git/*" "*.env"

      - name: Upload Backend to S3 for EB
        working-directory: ./backend
        run: |
          VERSION_LABEL=${GITHUB_SHA::8}-$(date +%s)
          echo "VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
          aws s3 cp backend-deploy.zip s3://${{ env.EB_BUCKET }}/backend-deploy-${VERSION_LABEL}.zip

      - name: Ensure EB Application Exists
        run: |
          aws elasticbeanstalk create-application \
            --application-name ${{ env.EB_APP_NAME }} \
            --description "HR Management Backend" || echo "Application exists or was created"
          sleep 10

      - name: Deploy Application Version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APP_NAME }} \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=${{ env.EB_BUCKET }},S3Key=backend-deploy-${VERSION_LABEL}.zip

      - name: Create or Update Environment
        run: |
          # Check if environment exists with retries
          ENV_EXISTS=false
          for i in {1..5}; do
            if aws elasticbeanstalk describe-environments \
                --application-name ${{ env.EB_APP_NAME }} \
                --environment-names ${{ env.EB_ENV_NAME }} \
                --query 'Environments[0].Status' \
                --output text | grep -q 'Ready'; then
              ENV_EXISTS=true
              break
            fi
            echo "Environment check attempt $i/5 - waiting..."
            sleep 10
          done

          if [ "$ENV_EXISTS" = true ]; then
            echo "Updating existing environment..."
            aws elasticbeanstalk update-environment \
              --environment-name ${{ env.EB_ENV_NAME }} \
              --version-label $VERSION_LABEL || \
            (echo "Update failed, attempting create..." && \
             aws elasticbeanstalk create-environment \
              --application-name ${{ env.EB_APP_NAME }} \
              --environment-name ${{ env.EB_ENV_NAME }} \
              --solution-stack-name "${{ env.SOLUTION_STACK }}" \
              --version-label $VERSION_LABEL \
              --option-settings '[
                {
                  "Namespace": "aws:elasticbeanstalk:environment",
                  "OptionName": "EnvironmentType",
                  "Value": "SingleInstance"
                },
                {
                  "Namespace": "aws:elasticbeanstalk:application:environment",
                  "OptionName": "NODE_ENV",
                  "Value": "production"
                }
              ]')
          else
            echo "Creating new environment..."
            aws elasticbeanstalk create-environment \
              --application-name ${{ env.EB_APP_NAME }} \
              --environment-name ${{ env.EB_ENV_NAME }} \
              --solution-stack-name "${{ env.SOLUTION_STACK }}" \
              --version-label $VERSION_LABEL \
              --option-settings '[
                {
                  "Namespace": "aws:elasticbeanstalk:environment",
                  "OptionName": "EnvironmentType",
                  "Value": "SingleInstance"
                },
                {
                  "Namespace": "aws:elasticbeanstalk:application:environment",
                  "OptionName": "NODE_ENV",
                  "Value": "production"
                }
              ]'
          fi

      - name: Clean Old Elastic Beanstalk Versions
        run: |
          versions_to_delete=$(aws elasticbeanstalk describe-application-versions \
            --application-name ${{ env.EB_APP_NAME }} \
            --query "ApplicationVersions[?VersionLabel!='$VERSION_LABEL'].VersionLabel" \
            --output text | tr '\t' '\n' | sort | head -n -${{ env.KEEP_VERSIONS }} || true)
          
          if [ -n "$versions_to_delete" ]; then
            echo "Deleting old versions:"
            echo "$versions_to_delete"
            for version in $versions_to_delete; do
              aws elasticbeanstalk delete-application-version \
                --application-name ${{ env.EB_APP_NAME }} \
                --version-label "$version" \
                --delete-source-bundle
            done
          else
            echo "No old versions to delete"
          fi

      - name: Clean Old S3 Deployment Files
        run: |
          files_to_delete=$(aws s3api list-objects \
            --bucket ${{ env.EB_BUCKET }} \
            --prefix "backend-deploy-" \
            --query "reverse(sort_by(Contents,&LastModified))[${{ env.KEEP_VERSIONS }}:].Key" \
            --output text || true)
          
          if [ -n "$files_to_delete" ]; then
            echo "Deleting old deployment files:"
            echo "$files_to_delete"
            for file in $files_to_delete; do
              aws s3 rm "s3://${{ env.EB_BUCKET }}/$file"
            done
          else
            echo "No old deployment files to delete"
          fi
